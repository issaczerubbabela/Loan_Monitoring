import streamlit as st
import pandas as pd
import os
from main_serp import generate_queries, search_and_save

SERPAPI_API_KEY = "YOUR_SERPAPI_KEY"  # Replace with your actual key

# ---------------- Query Keys ----------------
QUERY_KEYS = [
    "Stock performance outlook",
    "Industry recession/growth",
    "Job automation risk",
    "Job market demand",
    "Company M&A possibility",
    "Product relevance",
    "Skill obsolescence",
    "Replaceability risk",
    "Pollution projection",
    "Disease risk in polluted zones",
    "College education cost",
    "Financial burden of children"
]

KEY_TO_INDEX = {k: i for i, k in enumerate(QUERY_KEYS)}

# ---------------- Web Search Logic ----------------
def perform_web_search(borrower_info, selected_keys, years_ahead):
    job_title = borrower_info["job_title"]
    company = borrower_info["company"]
    industry = borrower_info["industry"]
    borrower_id = borrower_info["borrower_id"]

    all_queries = generate_queries(job_title, company, industry, years_ahead)
    selected_queries = [(all_queries[KEY_TO_INDEX[key]], key) for key in selected_keys]

    all_cleaned_files = []
    for query_text, attribute_key in selected_queries:
        cleaned_files = search_and_save(query_text, borrower_id, SERPAPI_API_KEY, attribute_key)
        all_cleaned_files.extend(cleaned_files)

    return all_cleaned_files

# ---------------- Streamlit Layout ----------------
st.set_page_config(page_title="Borrower Risk Assessment", layout="wide")

st.title("üîç Borrower Risk Assessment Web Search Tool")
st.sidebar.header("Settings")

input_mode = st.sidebar.radio("Input Mode:", ("Manual Form", "Upload CSV File"))
years_ahead = st.sidebar.number_input("Years Ahead", min_value=1, max_value=50, value=5)
debug_mode = st.sidebar.checkbox("Debug Mode (no search, upload articles manually)")

if input_mode == "Manual Form":
    st.header("üë§ Borrower Information")

    with st.form("borrower_form"):
        col1, col2, col3 = st.columns(3)
        with col1:
            borrower_id = st.text_input("Borrower ID")
        with col2:
            borrower_name = st.text_input("Name")
        with col3:
            age = st.number_input("Age", min_value=0, step=1)

        col4, col5, col6 = st.columns(3)
        with col4:
            loan_amount = st.number_input("Loan Amount", min_value=0.0, step=1000.0)
        with col5:
            loan_start_year = st.number_input("Loan Start Year", min_value=1900, max_value=2100)
        with col6:
            location = st.text_input("Location")

        col7, col8 = st.columns(2)
        with col7:
            job_title = st.text_input("Job Title")
        with col8:
            company = st.text_input("Company")

        col9, col10 = st.columns(2)
        with col9:
            industry = st.text_input("Industry")
        with col10:
            repayments_on_time = st.number_input("Repayments On Time", min_value=0, step=1)

        col11, col12 = st.columns(2)
        with col11:
            late_payments = st.number_input("Late Payments", min_value=0, step=1)
        with col12:
            avg_days_late = st.number_input("Avg Days Late", min_value=0.0, step=1.0)

        submitted = st.form_submit_button("Submit")

    if submitted:
        borrower_info = {
            "borrower_id": borrower_id,
            "borrower_name": borrower_name,
            "loan_amount": loan_amount,
            "loan_start_year": loan_start_year,
            "job_title": job_title,
            "company": company,
            "industry": industry,
            "repayments_on_time": repayments_on_time,
            "late_payments": late_payments,
            "avg_days_late": avg_days_late,
            "age": age,
            "location": location
        }

        st.header("Select Query Attributes")
        selected_keys = [key for key in QUERY_KEYS if st.checkbox(key, key=f"chk_{key}")]

        if debug_mode:
            st.warning("Debug mode active: Upload articles manually below.")
            uploaded_files = st.file_uploader("Upload article text files", type=["txt"], accept_multiple_files=True)
            if uploaded_files:
                os.makedirs("articles/debug_manual", exist_ok=True)
                for file in uploaded_files:
                    save_path = os.path.join("articles/debug_manual", f"{borrower_id}_{file.name}")
                    with open(save_path, "wb") as f:
                        f.write(file.read())
                st.success("Files saved!")
        else:
            if st.button("Start Web Search"):
                if selected_keys:
                    with st.spinner("Searching and cleaning articles..."):
                        cleaned_files = perform_web_search(borrower_info, selected_keys, years_ahead)
                    st.success(f"Saved {len(cleaned_files)} cleaned articles!")

                    with st.expander("üìÑ Preview Cleaned Articles"):
                        for file in cleaned_files:
                            st.markdown(f"**{os.path.basename(file)}**")
                            with open(file, "r", encoding="utf-8") as f:
                                text_content = f.read()
                                st.text_area("", text_content[:4000], height=300, key=file)
                else:
                    st.error("Please select at least one query attribute.")

else:  # CSV mode
    st.header("üìÑ Upload Borrower CSV File")
    csv_file = st.file_uploader("Upload CSV", type=["csv"])
    if csv_file is not None:
        df = pd.read_csv(csv_file)
        st.success(f"Loaded {len(df)} borrowers")
        st.dataframe(df)

        st.header("Select Query Attributes")
        selected_keys = [key for key in QUERY_KEYS if st.checkbox(key, key=f"csvchk_{key}")]

        if debug_mode:
            st.warning("Debug mode active: Upload articles manually below.")
            uploaded_files = st.file_uploader("Upload article text files", type=["txt"], accept_multiple_files=True)
            if uploaded_files:
                os.makedirs("articles/debug_manual", exist_ok=True)
                for file in uploaded_files:
                    save_path = os.path.join("articles/debug_manual", f"csv_{file.name}")
                    with open(save_path, "wb") as f:
                        f.write(file.read())
                st.success("Files saved!")
        else:
            if st.button("Process All Borrowers"):
                if selected_keys:
                    progress_bar = st.progress(0)
                    for idx, row in df.iterrows():
                        borrower_info = {
                            "borrower_id": str(row["borrower_id"]),
                            "borrower_name": row["borrower_name"],
                            "loan_amount": row["loan_amount"],
                            "loan_start_year": row["loan_start_year"],
                            "job_title": row["job_title"],
                            "company": row["company"],
                            "industry": row["industry"],
                            "repayments_on_time": row["repayments_on_time"],
                            "late_payments": row["late_payments"],
                            "avg_days_late": row["avg_days_late"],
                            "age": row["age"],
                            "location": row["location"]
                        }
                        perform_web_search(borrower_info, selected_keys, years_ahead)
                        progress_bar.progress((idx + 1) / len(df))
                    st.success("Done processing all borrowers!")
                else:
                    st.error("Please select at least one query attribute.")
