import streamlit as st
import pandas as pd
import os
from main_serp import generate_queries, search_and_save  # Calls your actual search logic

SERPAPI_API_KEY = "YOUR_SERPAPI_KEY"  # <-- Replace with your real key

# Mapping keys to query list positions
QUERY_KEYS = [
    "Stock performance outlook",
    "Industry recession/growth",
    "Job automation risk",
    "Job market demand",
    "Company M&A possibility",
    "Product relevance",
    "Skill obsolescence",
    "Replaceability risk",
    "Pollution projection",
    "Disease risk in polluted zones",
    "College education cost",
    "Financial burden of children"
]

KEY_TO_INDEX = {k: i for i, k in enumerate(QUERY_KEYS)}

def perform_web_search(borrower_info, selected_keys, years_ahead):
    job_title = borrower_info["job_title"]
    company = borrower_info["company"]
    industry = borrower_info["industry"]
    borrower_id = borrower_info["borrower_id"]

    # Get all queries
    all_queries = generate_queries(job_title, company, industry, years_ahead)

    # Filter queries by user-selected keys
    selected_queries = [all_queries[KEY_TO_INDEX[key]] for key in selected_keys]

    all_saved_files = []
    for query in selected_queries:
        saved_files = search_and_save(query, borrower_id, SERPAPI_API_KEY)
        all_saved_files.extend(saved_files)

    return all_saved_files

# Configure page
st.set_page_config(page_title="Risk Assessment Tool", layout="wide")

# Custom CSS for better styling
st.markdown("""
<style>
    .main-header {
        text-align: center;
        color: #1f77b4;
        margin-bottom: 2rem;
        padding: 1rem;
        background: linear-gradient(90deg, #f0f2f6, #ffffff, #f0f2f6);
        border-radius: 10px;
    }
    .section-header {
        color: #2c3e50;
        border-bottom: 2px solid #3498db;
        padding-bottom: 10px;
        margin-bottom: 2rem;
        margin-top: 0.5rem;
    }
    .query-section {
        padding: 1.5rem;
        height: 500px;
        overflow-y: auto;
    }
    .form-section {
        background-color: #ffffff;
        padding: 1.5rem;
        border-radius: 10px;
        border: 1px solid #dee2e6;
    }
    .stCheckbox > label {
        font-weight: 500;
        color: #495057;
    }
    .upload-section {
        background-color: #e8f4fd;
        padding: 1rem;
        border-radius: 8px;
        border: 1px dashed #3498db;
    }
</style>
""", unsafe_allow_html=True)

# Main header
st.markdown('<div class="main-header"><h1>🔍 Borrower Risk Assessment Web Search Tool</h1></div>', unsafe_allow_html=True)

# Top controls row
col_control1, col_control2, col_control3, col_control4 = st.columns([2, 2, 2, 2])

with col_control1:
    input_mode = st.selectbox("📋 Input Mode:", ("Manual Form", "Upload CSV File"))

with col_control2:
    years_ahead = st.number_input("📅 Years Ahead", min_value=1, max_value=50, value=5)

with col_control3:
    debug_mode = st.checkbox("🐛 Debug Mode")

with col_control4:
    st.write("") # Spacer

# Main content layout
if input_mode == "Manual Form":
    # Two-column layout for form and queries
    form_col, query_col = st.columns([3, 2])
    
    with form_col:
        st.markdown('<div class="form-section">', unsafe_allow_html=True)
        st.markdown('<h3 class="section-header">👤 Borrower Information</h3>', unsafe_allow_html=True)
        
        # Initialize session state for form data
        if 'form_submitted' not in st.session_state:
            st.session_state.form_submitted = False
        
        with st.form("borrower_form", clear_on_submit=False):
            # Personal Info
            st.markdown("**Personal Details**")
            col1, col2, col3 = st.columns(3)
            with col1:
                borrower_id = st.text_input("🆔 Borrower ID", key="bid")
            with col2:
                borrower_name = st.text_input("👤 Name", key="bname")
            with col3:
                age = st.number_input("🎂 Age", min_value=0, step=1, key="bage")

            st.markdown("**Loan Details**")
            col4, col5, col6 = st.columns(3)
            with col4:
                loan_amount = st.number_input("💰 Loan Amount", min_value=0.0, step=1000.0, format="%.2f", key="lamount")
            with col5:
                loan_start_year = st.number_input("📅 Loan Start Year", min_value=1900, max_value=2100, step=1, key="lyear")
            with col6:
                location = st.text_input("📍 Location", key="bloc")

            st.markdown("**Employment Info**")
            col7, col8 = st.columns(2)
            with col7:
                job_title = st.text_input("💼 Job Title", key="jtitle")
            with col8:
                company = st.text_input("🏢 Company", key="bcompany")

            col9, col10 = st.columns(2)
            with col9:
                industry = st.text_input("🏭 Industry", key="bindustry")
            with col10:
                repayments_on_time = st.number_input("✅ Repayments On Time", min_value=0, step=1, key="rontime")

            st.markdown("**Payment History**")
            col11, col12 = st.columns(2)
            with col11:
                late_payments = st.number_input("⚠️ Late Payments", min_value=0, step=1, key="lpayments")
            with col12:
                avg_days_late = st.number_input("📊 Avg Days Late", min_value=0.0, step=1.0, key="dayslate")

            submitted = st.form_submit_button("📝 Update Form Data", use_container_width=True)

        if submitted:
            st.session_state.form_submitted = True
            st.session_state.borrower_info = {
                "borrower_id": borrower_id,
                "borrower_name": borrower_name,
                "loan_amount": loan_amount,
                "loan_start_year": loan_start_year,
                "job_title": job_title,
                "company": company,
                "industry": industry,
                "repayments_on_time": repayments_on_time,
                "late_payments": late_payments,
                "avg_days_late": avg_days_late,
                "age": age,
                "location": location
            }
            st.success("✅ Form data updated!")
        
        st.markdown('</div>', unsafe_allow_html=True)

    with query_col:
        st.markdown('<div class="query-section">', unsafe_allow_html=True)
        st.markdown('<h3 class="section-header">🎯 Select Query Attributes</h3>', unsafe_allow_html=True)
        
        # Select All / Deselect All buttons
        col_btn1, col_btn2 = st.columns(2)
        with col_btn1:
            if st.button("✅ Select All", use_container_width=True):
                for key in QUERY_KEYS:
                    st.session_state[f"check_{key}"] = True
        with col_btn2:
            if st.button("❌ Clear All", use_container_width=True):
                for key in QUERY_KEYS:
                    st.session_state[f"check_{key}"] = False
        
        st.markdown("---")
        
        # Query checkboxes with categories
        financial_queries = ["Stock performance outlook", "Industry recession/growth", "Company M&A possibility"]
        job_queries = ["Job automation risk", "Job market demand", "Product relevance", "Skill obsolescence", "Replaceability risk"]
        social_queries = ["Pollution projection", "Disease risk in polluted zones", "College education cost", "Financial burden of children"]
        
        st.markdown("**💼 Financial & Market Risk**")
        for key in financial_queries:
            st.checkbox(key, key=f"check_{key}")
        
        st.markdown("**🔧 Employment Risk**") 
        for key in job_queries:
            st.checkbox(key, key=f"check_{key}")
            
        st.markdown("**🌍 Social & Environmental Risk**")
        for key in social_queries:
            st.checkbox(key, key=f"check_{key}")
        
        st.markdown('</div>', unsafe_allow_html=True)

    # Action buttons and results at the bottom
    st.markdown("---")
    
    if st.session_state.get('form_submitted', False):
        selected_keys = [key for key in QUERY_KEYS if st.session_state.get(f"check_{key}", False)]
        
        col_action1, col_action2, col_action3 = st.columns([2, 2, 4])
        
        with col_action1:
            st.metric("Selected Queries", len(selected_keys))
        
        with col_action2:
            if debug_mode:
                st.info("🐛 Debug Mode Active")
            else:
                st.info("🔍 Search Mode Active")
        
        if debug_mode:
            with col_action3:
                st.markdown('<div class="upload-section">', unsafe_allow_html=True)
                uploaded_files = st.file_uploader("📁 Upload Article Files", type=["html", "txt"], accept_multiple_files=True)
                if uploaded_files and st.button("💾 Save Files"):
                    os.makedirs("articles", exist_ok=True)
                    for file in uploaded_files:
                        save_path = os.path.join("articles", f"{st.session_state.borrower_info['borrower_id']}_{file.name}")
                        with open(save_path, "wb") as f:
                            f.write(file.read())
                    st.success("✅ Files saved!")
                st.markdown('</div>', unsafe_allow_html=True)
        else:
            with col_action3:
                if st.button("🚀 Start Web Search", use_container_width=True, type="primary"):
                    if selected_keys:
                        with st.spinner("🔍 Searching the web..."):
                            saved_files = perform_web_search(st.session_state.borrower_info, selected_keys, years_ahead)
                        if saved_files:
                            st.success(f"✅ Saved {len(saved_files)} articles!")
                            with st.expander("📋 View Saved Files"):
                                for file in saved_files:
                                    st.text(file)
                        else:
                            st.warning("⚠️ No articles saved.")
                    else:
                        st.error("❌ Please select at least one query attribute.")

else:  # CSV Upload Mode
    # Two-column layout for CSV and queries
    csv_col, query_col = st.columns([3, 2])
    
    with csv_col:
        st.markdown('<div class="form-section">', unsafe_allow_html=True)
        st.markdown('<h3 class="section-header">📊 Upload Borrower CSV File</h3>', unsafe_allow_html=True)
        
        csv_file = st.file_uploader("📁 Upload CSV", type=["csv"])
        
        if csv_file is not None:
            df = pd.read_csv(csv_file)
            st.success(f"✅ Loaded {len(df)} borrowers")
            
            with st.expander("👀 Preview Data", expanded=True):
                st.dataframe(df, use_container_width=True)
            
            st.session_state.csv_loaded = True
            st.session_state.df = df
        
        st.markdown('</div>', unsafe_allow_html=True)

    with query_col:
        st.markdown('<div class="query-section">', unsafe_allow_html=True)
        st.markdown('<h3 class="section-header">🎯 Select Query Attributes</h3>', unsafe_allow_html=True)
        
        # Select All / Deselect All buttons
        col_btn1, col_btn2 = st.columns(2)
        with col_btn1:
            if st.button("✅ Select All", use_container_width=True, key="csv_select_all"):
                for key in QUERY_KEYS:
                    st.session_state[f"csv_check_{key}"] = True
        with col_btn2:
            if st.button("❌ Clear All", use_container_width=True, key="csv_clear_all"):
                for key in QUERY_KEYS:
                    st.session_state[f"csv_check_{key}"] = False
        
        st.markdown("---")
        
        # Query checkboxes (same categories as before)
        st.markdown("**💼 Financial & Market Risk**")
        for key in ["Stock performance outlook", "Industry recession/growth", "Company M&A possibility"]:
            st.checkbox(key, key=f"csv_check_{key}")
        
        st.markdown("**🔧 Employment Risk**") 
        for key in ["Job automation risk", "Job market demand", "Product relevance", "Skill obsolescence", "Replaceability risk"]:
            st.checkbox(key, key=f"csv_check_{key}")
            
        st.markdown("**🌍 Social & Environmental Risk**")
        for key in ["Pollution projection", "Disease risk in polluted zones", "College education cost", "Financial burden of children"]:
            st.checkbox(key, key=f"csv_check_{key}")
        
        st.markdown('</div>', unsafe_allow_html=True)

    # CSV Action section at the bottom
    st.markdown("---")
    
    if st.session_state.get('csv_loaded', False):
        selected_keys = [key for key in QUERY_KEYS if st.session_state.get(f"csv_check_{key}", False)]
        
        col_csv1, col_csv2, col_csv3 = st.columns([2, 2, 4])
        
        with col_csv1:
            st.metric("Borrowers", len(st.session_state.df))
        
        with col_csv2:
            st.metric("Selected Queries", len(selected_keys))
        
        if debug_mode:
            with col_csv3:
                st.markdown('<div class="upload-section">', unsafe_allow_html=True)
                uploaded_files = st.file_uploader("📁 Upload Article Files (for all borrowers)", type=["html", "txt"], accept_multiple_files=True, key="csv_upload")
                if uploaded_files and st.button("💾 Save Files", key="csv_save"):
                    os.makedirs("articles", exist_ok=True)
                    for file in uploaded_files:
                        save_path = os.path.join("articles", f"debug_{file.name}")
                        with open(save_path, "wb") as f:
                            f.write(file.read())
                    st.success("✅ Files saved!")
                st.markdown('</div>', unsafe_allow_html=True)
        else:
            with col_csv3:
                if st.button("🚀 Process All Borrowers", use_container_width=True, type="primary"):
                    if selected_keys:
                        progress_bar = st.progress(0)
                        total = len(st.session_state.df)
                        
                        results_container = st.container()
                        
                        for idx, row in st.session_state.df.iterrows():
                            borrower_info = {
                                "borrower_id": str(row["borrower_id"]),
                                "borrower_name": row["borrower_name"],
                                "loan_amount": row["loan_amount"],
                                "loan_start_year": row["loan_start_year"],
                                "job_title": row["job_title"],
                                "company": row["company"],
                                "industry": row["industry"],
                                "repayments_on_time": row["repayments_on_time"],
                                "late_payments": row["late_payments"],
                                "avg_days_late": row["avg_days_late"],
                                "age": row["age"],
                                "location": row["location"]
                            }

                            with results_container:
                                st.write(f"Processing: {borrower_info['borrower_name']} (ID: {borrower_info['borrower_id']})")
                            
                            saved_files = perform_web_search(borrower_info, selected_keys, years_ahead)
                            
                            with results_container:
                                st.success(f"✅ {borrower_info['borrower_name']}: {len(saved_files)} articles saved")

                            progress_bar.progress((idx + 1) / total)

                        st.success("🎉 Completed processing all borrowers!")
                    else:
                        st.error("❌ Please select at least one query attribute.")
